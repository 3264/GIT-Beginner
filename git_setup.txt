	HOW TO INITIALISE GIT REPO AND GENERATE SSH KEY AND HOW TO IDENTIFY YOUR SELF TO A ONLINE REPO:
----------------------------------------------------------------------------------------------------

1. Create a dir anywhere
2. OPEN GITBASH
3. Go to the directory from bash which you treat as repository (history directory)
3. Type git init (done only once for each repository directory)

4
	a. Type ssh-keygen -t rsa -C "registered email id"
	b. Accept default dir and choose all defaults
	c. Choose all defaults and key is generated at the specified dir in id_rsa.pub file
5 
	a. Navigate to .ssh folder 
	b. Open .pub file and copy key and paste in your online account settings
	EXAMPLE for GITHUB
	settings > ssh keys > add ssh key > give title and paste key and save

============================================================================================================================================

>> To clone a repo use
	git clone repourl (get ssh url from repo settings)

>> to remove file use 
	git rm "filepath with name"

>> git commit -m "reason" will commit the changes

>> "gitk &" will shows commits in new window.

>> To push into remote repo use 
	git push origin master

>> To pull from remote repo use
	git pull origin master

>> gitk is a review tool. All details of commits are presented in this tool. We can review changes in gitk window. It will show all the commits, the commiter name, committed date, files present in a commit and the differences in each file.

>> A "git pull" will fail/abort when you have some local changes and some other committer also changed the same file. So always you have to stash your local changes and do a "git pull" and again apply the stashed changes.

>> "git stash" command is used to hide the changes.
>> "git stash pop" command is used to get back the hidden changes.

>> "merge conflict occurs" when some changes occurs in the same line by different collaborators.


MERGE CONFLICTS
1. Merge conflict will happen when multiple developers or collaborators changes the same file.
2. There are two types of merge conflicts.
a) A merge conflict which git can automatically resolve.
b) A merge conflict which git cannot resolve and need human intervention.
3. Changes done in different lines are automatically resolve by git.
4. Changes done in the same line are non resolvable merge conflict and git leaves the decision to the developer to resolve it.
5. when non resolvable merge conflict occurs , the developers involved in it sit together and resolve the conflicts.
>>those which are added , are only committed.
>> you can push more than one commit in a single push.

COMMIT CODE
>>each and every commit created will have a commit id. 
>> no two commit ids will be same
>> all commits are created like a chain. every commit is a child of another commit except the root commit.
>> the commit code generated for a commit will be identical across other developers repository and remote reposirory.
